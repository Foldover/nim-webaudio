/* Generated by the Nim Compiler v0.16.1 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI55402 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI3428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55404 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI55424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI55432 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48453 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48447 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48441 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48435 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48431 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48426 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48422 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48418 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI48417 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48415 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI55430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3482 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3487 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3487.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3487, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI13009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13009.node = NNI13009;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
var NNI3482 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3482.node = NNI3482;
var NNI3426 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3426.node = NNI3426;
NTI3426.base = NTI3424;
NTI3482.base = NTI3426;
var NNI48417 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "closeImpl", len: 0, typ: NTI48418, name: "closeImpl", sons: null}, 
{kind: 1, offset: "atEndImpl", len: 0, typ: NTI48422, name: "atEndImpl", sons: null}, 
{kind: 1, offset: "setPositionImpl", len: 0, typ: NTI48426, name: "setPositionImpl", sons: null}, 
{kind: 1, offset: "getPositionImpl", len: 0, typ: NTI48431, name: "getPositionImpl", sons: null}, 
{kind: 1, offset: "readDataImpl", len: 0, typ: NTI48435, name: "readDataImpl", sons: null}, 
{kind: 1, offset: "peekDataImpl", len: 0, typ: NTI48441, name: "peekDataImpl", sons: null}, 
{kind: 1, offset: "writeDataImpl", len: 0, typ: NTI48447, name: "writeDataImpl", sons: null}, 
{kind: 1, offset: "flushImpl", len: 0, typ: NTI48453, name: "flushImpl", sons: null}]};
NTI48417.node = NNI48417;
NTI48417.base = NTI3408;
NTI48415.base = NTI48417;
NTI55432.base = NTI138;
var NNI55430 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "stream", len: 0, typ: NTI48415, name: "stream", sons: null}, 
{kind: 1, offset: "testErrors", len: 0, typ: NTI55432, name: "testErrors", sons: null}, 
{kind: 1, offset: "testStartTime", len: 0, typ: NTI124, name: "testStartTime", sons: null}, 
{kind: 1, offset: "testStackTrace", len: 0, typ: NTI138, name: "testStackTrace", sons: null}]};
NTI55430.node = NNI55430;
var NNI55422 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55422.node = NNI55422;
NTI55422.base = NTI3408;
NTI55430.base = NTI55422;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3448.base = NTI3424;
var NNI3458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3458.node = NNI3458;
NTI3458.base = NTI3424;
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3446.base = NTI3424;
var NNI55404 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI55404, name: "PRINT_ALL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI55404, name: "PRINT_FAILURES", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI55404, name: "PRINT_NONE", len: 0, sons: null}}};
NTI55404.node = NNI55404;
var NNI55424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "colorOutput", len: 0, typ: NTI130, name: "colorOutput", sons: null}, 
{kind: 1, offset: "outputLevel", len: 0, typ: NTI55404, name: "outputLevel", sons: null}, 
{kind: 1, offset: "isInSuite", len: 0, typ: NTI130, name: "isInSuite", sons: null}, 
{kind: 1, offset: "isInTest", len: 0, typ: NTI130, name: "isInTest", sons: null}]};
NTI55424.node = NNI55424;
NTI55424.base = NTI55422;
var NNI3428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3428.node = NNI3428;
NTI3428.base = NTI3426;
var NNI55402 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI55402, name: "OK", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI55402, name: "FAILED", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI55402, name: "SKIPPED", len: 0, sons: null}}};
NTI55402.node = NNI55402;
function makeNimstrLit(c_14003) {

    var ln = c_14003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function setConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_19217, src_19218, ti_19219) {

var result_19629 = null;
switch (ti_19219.kind) {
case 21: case 22: case 23: case 5: if (!(isFatPointer_19201(ti_19219))) {
result_19629 = src_19218;
}
else {
result_19629 = [src_19218[0], src_19218[1]];}


break;
case 19:       if (dest_19217 === null || dest_19217 === undefined) {
        dest_19217 = {};
      }
      else {
        for (var key in dest_19217) { delete dest_19217[key]; }
      }
      for (var key in src_19218) { dest_19217[key] = src_19218[key]; }
      result_19629 = dest_19217;
    
break;
case 18: case 17: if (!((ti_19219.base == null))) {
result_19629 = nimCopy(dest_19217, src_19218, ti_19219.base);
}
else {
if ((ti_19219.kind == 17)) {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {m_type: ti_19219} : dest_19217;}
else {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {} : dest_19217;}
}
nimCopyAux(result_19629, src_19218, ti_19219.node);

break;
case 24: case 4: case 27: case 16:       if (src_19218 === null) {
        result_19629 = null;
      }
      else {
        if (dest_19217 === null || dest_19217 === undefined) {
          dest_19217 = new Array(src_19218.length);
        }
        else {
          dest_19217.length = src_19218.length;
        }
        result_19629 = dest_19217;
        for (var i = 0; i < src_19218.length; ++i) {
          result_19629[i] = nimCopy(result_19629[i], src_19218[i], ti_19219.base);
        }
      }
    
break;
case 28:       if (src_19218 !== null) {
        result_19629 = src_19218.slice(0);
      }
    
break;
default: 
result_19629 = src_19218;
break;
}
return result_19629;
}
function eqStrings(a_16603, b_16604) {

    if (a_16603 == b_16604) return true;
    if ((!a_16603) || (!b_16604)) return false;
    var alen = a_16603.length;
    if (alen != b_16604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16603[i] != b_16604[i]) return false;
    return true;
  }
function arrayConstr(len_19664, value_19665, typ_19666) {

      var result = new Array(len_19664);
      for (var i = 0; i < len_19664; ++i) result[i] = nimCopy(null, value_19665, typ_19666);
      return result;
    }
function cstrToNimstr(c_14203) {

  var ln = c_14203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_14403) {

    var len = s_14403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14403[i] < 128)
        asciiPart[i] = fcc(s_14403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_13406, ename_13407) {

e_13406.name = ename_13407;
if ((excHandler == 0)) {
unhandledException(e_13406);
}

e_13406.trace = nimCopy(null, rawWriteStackTrace_13228(), NTI138);
throw e_13406;}
function isObj(obj_19868, subclass_19869) {

var result_19870 = false;
BeforeRet: do {
var x_19871 = obj_19868;
if ((x_19871 == subclass_19869)) {
result_19870 = true;
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!!((x_19871 == subclass_19869))) break L2;
if ((x_19871 == null)) {
result_19870 = false;
break BeforeRet;
}

x_19871 = x_19871.base;
}
} while(false);
result_19870 = true;
break BeforeRet;
} while (false); 
return result_19870;
}
function chckIndx(i_19803, a_19804, b_19805) {

var Tmp1;
var result_19806 = 0;
BeforeRet: do {
if (!(a_19804 <= i_19803)) Tmp1 = false; else {Tmp1 = (i_19803 <= b_19805); }if (Tmp1) {
result_19806 = i_19803;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19806;
}
function addInt(a_16803, b_16804) {

      var result = a_16803 + b_16804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mnewString(len_14603) {

      var result = new Array(len_14603+1);
      result[0] = 0;
      result[len_14603] = 0;
      return result;
    }
function addChar(x_19906, c_19907) {

    x_19906[x_19906.length-1] = c_19907; x_19906.push(0);
  }
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([65, 90]);
function chckRange(i_19809, a_19810, b_19811) {

var Tmp1;
var result_19812 = 0;
BeforeRet: do {
if (!(a_19810 <= i_19809)) Tmp1 = false; else {Tmp1 = (i_19809 <= b_19811); }if (Tmp1) {
result_19812 = i_19809;
break BeforeRet;
}
else {
raiseRangeError();
}

} while (false); 
return result_19812;
}
var ConstSet5 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
function rawEcho() {

var node_16636 = null;
node_16636 = document.getElementsByTagName('body')[0];if ((node_16636 === null)) {
var e_16650 = null;
e_16650 = {m_type: NTI3428, parent: null, name: null, message: null, trace: null};
e_16650.message = nimCopy(null, makeNimstrLit("<body> element does not exist yet!"), NTI138);
e_16650.parent = null;
raiseException(e_16650, "IOError");
}

    for (var i = 0; i < arguments.length; ++i) {
      var x = toJSStr(arguments[i]);
      node_16636.appendChild(document.createTextNode(x));
    }
    node_16636.appendChild(document.createElement("br"));
    }
var ConstSet6 = setConstr(46, 44);
function subInt(a_17003, b_17004) {

      var result = a_17003 - b_17004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function reprEnum(e_20228, typ_20229) {

var result_20230 = null;
var F={procname:"system.reprEnum",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
framePtr = F;
if (!(isUndefined_20232(typ_20229.node.sons[e_20228]))) {
F.line = 38;
result_20230 = nimCopy(null, cstrToNimstr(typ_20229.node.sons[e_20228].name), NTI138);
}
else {
F.line = 40;
result_20230 = nimCopy(null, (cstrToNimstr((e_20228)+"").slice(0,-1)).concat(makeNimstrLit(" (invalid data!)")), NTI138);
}

framePtr = F.prev;
return result_20230;
}
var nimvm_5887 = false;
var nim_program_result = 0;
var globalRaiseHook_11005 = [null];
var localRaiseHook_11010 = [null];
var outOfMemHook_11013 = [null];
function isFatPointer_19201(ti_19203) {

var result_19204 = false;
BeforeRet: do {
result_19204 = !((ConstSet1[ti_19203.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_19204;
}
function nimCopyAux(dest_19222, src_19223, n_19225) {

switch (n_19225.kind) {
case 0: 
break;
case 1:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
    
break;
case 2: L1: do {
var i_19615 = 0;
var colontmp__19617 = 0;
colontmp__19617 = (n_19225.len - 1);
var res_19620 = 0;
L2: do {
L3: while (true) {
if (!(res_19620 <= colontmp__19617)) break L3;
i_19615 = res_19620;
nimCopyAux(dest_19222, src_19223, n_19225.sons[i_19615]);
res_19620 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
      for (var i = 0; i < n_19225.sons.length; ++i) {
        nimCopyAux(dest_19222, src_19223, n_19225.sons[i][1]);
      }
    
break;
}
}
function add_11029(x_11032, x_11032_Idx, y_11033) {

        var len = x_11032[0].length-1;
        for (var i = 0; i < y_11033.length; ++i) {
          x_11032[0][len] = y_11033.charCodeAt(i);
          ++len;
        }
        x_11032[0][len] = 0
      }
function auxWriteStackTrace_13004(f_13006) {

var Tmp3;
var result_13007 = [null];
var it_13015 = f_13006;
var i_13016 = 0;
var total_13017 = 0;
var tempFrames_13021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13009);
L1: do {
L2: while (true) {
if (!!((it_13015 == null))) Tmp3 = false; else {Tmp3 = (i_13016 <= 63); }if (!Tmp3) break L2;
tempFrames_13021[i_13016].Field0 = it_13015.procname;
tempFrames_13021[i_13016].Field1 = it_13015.line;
i_13016 += 1;
total_13017 += 1;
it_13015 = it_13015.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_13015 == null))) break L5;
total_13017 += 1;
it_13015 = it_13015.prev;
}
} while(false);
result_13007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_13017 == i_13016))) {
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13007[0] = makeNimstrLit("(");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(cstrToNimstr(((total_13017 - i_13016))+"")); } else { result_13007[0] = cstrToNimstr(((total_13017 - i_13016))+"");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_13215 = 0;
var colontmp__13221 = 0;
colontmp__13221 = (i_13016 - 1);
var res_13224 = colontmp__13221;
L7: do {
L8: while (true) {
if (!(0 <= res_13224)) break L8;
j_13215 = res_13224;
add_11029(result_13007, 0, tempFrames_13021[j_13215].Field0);
if ((0 < tempFrames_13021[j_13215].Field1)) {
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13007[0] = makeNimstrLit(", line: ");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13021[j_13215].Field1)+"")); } else { result_13007[0] = cstrToNimstr((tempFrames_13021[j_13215].Field1)+"");};
}

if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13007[0] = makeNimstrLit("\x0A");};
res_13224 -= 1;
}
} while(false);
} while(false);
return result_13007[0];
}
function rawWriteStackTrace_13228() {

var result_13230 = null;
if (!((framePtr == null))) {
result_13230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13004(framePtr)), NTI138);
}
else {
result_13230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_13230;
}
function unhandledException(e_13253) {

var Tmp1;
var buf_13254 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_13253.message, null))) Tmp1 = false; else {Tmp1 = !((e_13253.message[0] == 0)); }if (Tmp1) {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(e_13253.message); } else { buf_13254[0] = e_13253.message;};
}
else {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13254[0] = makeNimstrLit(" [");};
add_11029(buf_13254, 0, e_13253.name);
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13254[0] = makeNimstrLit("]\x0A");};
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(rawWriteStackTrace_13228()); } else { buf_13254[0] = rawWriteStackTrace_13228();};
var cbuf_13401 = toJSStr(buf_13254[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_13401);
  }
  else {
    throw cbuf_13401;
  }
  }
function raiseOverflow() {

var e_13840 = null;
e_13840 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_13840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
e_13840.parent = null;
raiseException(e_13840, "OverflowError");
}
function raiseDivByZero() {

var e_13858 = null;
e_13858 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
e_13858.parent = null;
raiseException(e_13858, "DivByZeroError");
}
function getTime_51642() {

var result_53613 = null;
var F={procname:"times.getTime",prev:framePtr,filename:"lib/pure/times.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 1294;
result_53613 = new Date();
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_53613;
}
var startMilsecs_53712 = /**/[getTime_51642()];
var abortOnError_55456 = [false];
var checkpoints_55458 = [null];
var formatters_55460 = [null];
var objectID_61432 = /**/[0];
var ctx_71001 = /**/[new AudioContext()];
var gain_71002 = /**/[ctx_71001[0].createGain()];
gain_71002[0].gain.value = 5.0000000000000000e-01;
gain_71002[0].connect(ctx_71001[0].destination);
var osc_71003 = /**/[ctx_71001[0].createOscillator()];
osc_71003[0].type = "square";
osc_71003[0].frequency.value = 4.4000000000000000e+02;
osc_71003[0].connect(gain_71002[0]);
osc_71003[0].start();
function colonanonymous__71004() {

var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
framePtr = F;
if ((0.0 < gain_71002[0].gain.value)) {
F.line = 18;
gain_71002[0].gain.value = (gain_71002[0].gain.value - 1.0000000000000000e-02);
if ((gain_71002[0].gain.value < 0.0)) {
F.line = 20;
gain_71002[0].gain.value = 0.0;
}

}

framePtr = F.prev;
}
var interval_71006 = /**/[window.setInterval(colonanonymous__71004, 30)];
function stareq__45485(x_45490, x_45490_Idx, y_45492) {

var F={procname:"*=.*=",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 3472;
x_45490[x_45490_Idx] = (x_45490[x_45490_Idx] * y_45492);
framePtr = F.prev;
}
function colonanonymous__71007() {

var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
framePtr = F;
F.line = 25;
stareq__45485(osc_71003[0].frequency, "value", 5.0000000000000000e-01);
if ((osc_71003[0].frequency.value < 2.0000000000000000e+01)) {
F.line = 27;
gain_71002[0].gain.value = 0.0;
}

framePtr = F.prev;
}
var interval2_71019 = /**/[window.setInterval(colonanonymous__71007, 60)];
function colonanonymous__71020(e_71022) {

var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
framePtr = F;
F.line = 31;
osc_71003[0].frequency.value = 8.8000000000000000e+02;
F.line = 32;
gain_71002[0].gain.value = 5.0000000000000000e-01;
framePtr = F.prev;
}
window.addEventListener("mousedown", colonanonymous__71020, false);
function sysFatal_18852(message_18858) {

var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 2640;
var e_18860 = null;
F.line = 2641;
e_18860 = {m_type: NTI3482, parent: null, name: null, message: null, trace: null};
F.line = 2642;
e_18860.message = nimCopy(null, message_18858, NTI138);
F.line = 2643;
raiseException(e_18860, "NilAccessError");
framePtr = F.prev;
}
function chckNilDisp(p_18849, p_18849_Idx) {

if ((p_18849_Idx == 0)) {
sysFatal_18852(makeNimstrLit("cannot dispatch; dispatcher is nil"));
}

}
function raiseIndexError() {

var e_13894 = null;
e_13894 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null};
e_13894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
e_13894.parent = null;
raiseException(e_13894, "IndexError");
}
function writeData_48549(s_48551, buffer_48552, buffer_48552_Idx, bufLen_48553) {

var F={procname:"streams.writeData",prev:framePtr,filename:"lib/pure/streams.nim",line:0};
framePtr = F;
F.line = 130;
s_48551.writeDataImpl(s_48551, buffer_48552, buffer_48552_Idx, bufLen_48553);
framePtr = F.prev;
}
function write_48569(s_48571, x_48572) {

var F={procname:"streams.write",prev:framePtr,filename:"lib/pure/streams.nim",line:0};
framePtr = F;
if ((0 < (x_48572 != null ? x_48572.length-1 : 0))) {
F.line = 154;
writeData_48549(s_48571, x_48572, 0, (x_48572 != null ? x_48572.length-1 : 0));
}

framePtr = F.prev;
}
function writeLine_48835(s_48837, args_48839) {

var F={procname:"streams.writeLine",prev:framePtr,filename:"lib/pure/streams.nim",line:0};
framePtr = F;
L1: do {
F.line = 164;
var str_48847 = null;
F.line = 2039;
var i_48851 = 0;
L2: do {
F.line = 2040;
L3: while (true) {
if (!(i_48851 < (args_48839 != null ? args_48839.length : 0))) break L3;
F.line = 2041;
str_48847 = args_48839[chckIndx(i_48851, 0, args_48839.length)-0];
F.line = 164;
write_48569(s_48837, str_48847);
F.line = 2042;
i_48851 = addInt(i_48851, 1);
}
} while(false);
} while(false);
F.line = 165;
write_48569(s_48837, makeNimstrLit("\x0A"));
framePtr = F.prev;
}
function invalidFormatString_45538() {

var e_45546 = null;
e_45546 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null};
e_45546.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
e_45546.parent = null;
raiseException(e_45546, "ValueError");
}
function raiseRangeError() {

var e_13876 = null;
e_13876 = {m_type: NTI3458, parent: null, name: null, message: null, trace: null};
e_13876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
e_13876.parent = null;
raiseException(e_13876, "RangeError");
}
function nsuToLowerAsciiChar(c_39785) {

var result_39786 = 0;
var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"lib/pure/strutils.nim",line:0};
framePtr = F;
if ((ConstSet4[c_39785] != undefined)) {
F.line = 210;
result_39786 = chckRange(addInt(c_39785, 32), 0, 255);
}
else {
F.line = 212;
result_39786 = c_39785;
}

framePtr = F.prev;
return result_39786;
}
function nsuCmpIgnoreStyle(a_40067, b_40068) {

var Tmp7;
var result_40069 = 0;
var i_40070 = 0;
var j_40071 = 0;
L1: do {
L2: while (true) {
if (!true) break L2;
L3: do {
L4: while (true) {
if (!(a_40067[i_40070] == 95)) break L4;
i_40070 += 1;
}
} while(false);
L5: do {
L6: while (true) {
if (!(b_40068[j_40071] == 95)) break L6;
j_40071 += 1;
}
} while(false);
var aa_40090 = nsuToLowerAsciiChar(a_40067[i_40070]);
var bb_40091 = nsuToLowerAsciiChar(b_40068[j_40071]);
result_40069 = (aa_40090 - bb_40091);
if (!((result_40069 == 0))) Tmp7 = true; else {Tmp7 = (aa_40090 == 0); }if (Tmp7) {
break L1;
}

i_40070 += 1;
j_40071 += 1;
}
} while(false);
return result_40069;
}
function findNormalized_45521(x_45523, inArray_45525) {

var result_45526 = 0;
BeforeRet: do {
var i_45527 = 0;
L1: do {
L2: while (true) {
if (!(i_45527 < (inArray_45525 != null ? (inArray_45525.length-1) : -1))) break L2;
if ((nsuCmpIgnoreStyle(x_45523, inArray_45525[i_45527]) == 0)) {
result_45526 = i_45527;
break BeforeRet;
}

i_45527 += 2;
}
} while(false);
result_45526 = -1;
break BeforeRet;
} while (false); 
return result_45526;
}
function nsuAddf(s_45559, s_45559_Idx, formatstr_45560, a_45562) {

var Tmp5;
var Tmp8;
var Tmp11;
var i_45565 = 0;
var num_45566 = 0;
L1: do {
L2: while (true) {
if (!(i_45565 < (formatstr_45560 != null ? formatstr_45560.length-1 : 0))) break L2;
if ((formatstr_45560[i_45565] == 36)) {
switch (formatstr_45560[(i_45565 + 1)]) {
case 35: if (((a_45562 != null ? (a_45562.length-1) : -1) < num_45566)) {
invalidFormatString_45538();
}

if (s_45559[s_45559_Idx] != null) { s_45559[s_45559_Idx] = (s_45559[s_45559_Idx].slice(0, -1)).concat(a_45562[num_45566]); } else { s_45559[s_45559_Idx] = a_45562[num_45566];};
i_45565 += 2;
num_45566 += 1;

break;
case 36: if (s_45559[s_45559_Idx] != null) { addChar(s_45559[s_45559_Idx], 36); } else { s_45559[s_45559_Idx] = [36, 0]; };
i_45565 += 2;

break;
case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 45: var j_45602 = 0;
i_45565 += 1;
var negative_45612 = (formatstr_45560[i_45565] == 45);
if (negative_45612) {
i_45565 += 1;
}

L3: do {
L4: while (true) {
if (!(ConstSet2[formatstr_45560[i_45565]] != undefined)) break L4;
j_45602 = (((j_45602 * 10) + formatstr_45560[i_45565]) - 48);
i_45565 += 1;
}
} while(false);
if (!(negative_45612)) {
Tmp5 = (j_45602 - 1);
}
else {
Tmp5 = ((a_45562 != null ? a_45562.length : 0) - j_45602);
}

var idx_45660 = Tmp5;
if (((a_45562 != null ? (a_45562.length-1) : -1) < idx_45660)) {
invalidFormatString_45538();
}

if (s_45559[s_45559_Idx] != null) { s_45559[s_45559_Idx] = (s_45559[s_45559_Idx].slice(0, -1)).concat(a_45562[idx_45660]); } else { s_45559[s_45559_Idx] = a_45562[idx_45660];};

break;
case 123: var j_45669 = (i_45565 + 1);
L6: do {
L7: while (true) {
if (!!((ConstSet3[formatstr_45560[j_45669]] != undefined))) break L7;
j_45669 += 1;
}
} while(false);
var x_45689 = findNormalized_45521((formatstr_45560.slice((i_45565 + 2), ((j_45669 - 1))+1).concat(0)), a_45562);
if (!(0 <= x_45689)) Tmp8 = false; else {Tmp8 = (x_45689 < (a_45562 != null ? (a_45562.length-1) : -1)); }if (Tmp8) {
if (s_45559[s_45559_Idx] != null) { s_45559[s_45559_Idx] = (s_45559[s_45559_Idx].slice(0, -1)).concat(a_45562[(x_45689 + 1)]); } else { s_45559[s_45559_Idx] = a_45562[(x_45689 + 1)];};
}
else {
invalidFormatString_45538();
}

i_45565 = (j_45669 + 1);

break;
case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228: case 229: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 239: case 240: case 241: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: case 95: var j_45690 = (i_45565 + 1);
L9: do {
L10: while (true) {
if (!(ConstSet5[formatstr_45560[j_45690]] != undefined)) break L10;
j_45690 += 1;
}
} while(false);
var x_45709 = findNormalized_45521((formatstr_45560.slice((i_45565 + 1), ((j_45690 - 1))+1).concat(0)), a_45562);
if (!(0 <= x_45709)) Tmp11 = false; else {Tmp11 = (x_45709 < (a_45562 != null ? (a_45562.length-1) : -1)); }if (Tmp11) {
if (s_45559[s_45559_Idx] != null) { s_45559[s_45559_Idx] = (s_45559[s_45559_Idx].slice(0, -1)).concat(a_45562[(x_45709 + 1)]); } else { s_45559[s_45559_Idx] = a_45562[(x_45709 + 1)];};
}
else {
invalidFormatString_45538();
}

i_45565 = j_45690;

break;
default: 
invalidFormatString_45538();
break;
}
}
else {
if (s_45559[s_45559_Idx] != null) { addChar(s_45559[s_45559_Idx], formatstr_45560[i_45565]); } else { s_45559[s_45559_Idx] = [formatstr_45560[i_45565], 0]; };
i_45565 += 1;
}

}
} while(false);
}
function nsuFormatSingleElem(formatstr_45746, a_45747) {

var result_45748 = [null];
result_45748[0] = nimCopy(null, mnewString(0), NTI138);
nsuAddf(result_45748, 0, formatstr_45746, [a_45747]);
return result_45748[0];
}
function sysFatal_21821(message_21827) {

var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 2640;
var e_21829 = null;
F.line = 2641;
e_21829 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null};
F.line = 2642;
e_21829.message = nimCopy(null, message_21827, NTI138);
F.line = 2643;
raiseException(e_21829, "AssertionError");
framePtr = F.prev;
}
function raiseAssert_21816(msg_21818) {

var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 3533;
sysFatal_21821(msg_21818);
framePtr = F.prev;
}
function failedAssertImpl_21839(msg_21841) {

var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 3541;
raiseAssert_21816(msg_21841);
framePtr = F.prev;
}
function xmlEscape_57012(s_57014) {

var result_57015 = null;
var F={procname:"unittest.xmlEscape",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 203;
result_57015 = nimCopy(null, mnewString(0), NTI138);
L1: do {
F.line = 204;
var c_57017 = 0;
F.line = 3585;
var i_57035 = 0;
F.line = 3586;
var L_57037 = (s_57014 != null ? s_57014.length-1 : 0);
L2: do {
F.line = 3587;
L3: while (true) {
if (!(i_57035 < L_57037)) break L3;
F.line = 3588;
c_57017 = s_57014[chckIndx(i_57035, 0, s_57014.length)-0];
F.line = 205;
switch (c_57017) {
case 60: F.line = 206;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat(makeNimstrLit("&lt;")); } else { result_57015 = makeNimstrLit("&lt;");};

break;
case 62: F.line = 207;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat(makeNimstrLit("&gt;")); } else { result_57015 = makeNimstrLit("&gt;");};

break;
case 38: F.line = 208;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat(makeNimstrLit("&amp;")); } else { result_57015 = makeNimstrLit("&amp;");};

break;
case 34: F.line = 209;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat(makeNimstrLit("&quot;")); } else { result_57015 = makeNimstrLit("&quot;");};

break;
case 39: F.line = 210;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat(makeNimstrLit("&apos;")); } else { result_57015 = makeNimstrLit("&apos;");};

break;
default: 
if ((c_57017 < 32)) {
F.line = 213;
if (result_57015 != null) { result_57015 = (result_57015.slice(0, -1)).concat((makeNimstrLit("&#").slice(0,-1)).concat(cstrToNimstr((c_57017)+"").slice(0,-1),[59, 0])); } else { result_57015 = (makeNimstrLit("&#").slice(0,-1)).concat(cstrToNimstr((c_57017)+"").slice(0,-1),[59, 0]);};
}
else {
F.line = 215;
if (result_57015 != null) { addChar(result_57015, c_57017); } else { result_57015 = [c_57017, 0]; };
}

break;
}
F.line = 3589;
i_57035 = addInt(i_57035, 1);
if (!(((s_57014 != null ? s_57014.length-1 : 0) == L_57037))) {
F.line = 3590;
failedAssertImpl_21839(makeNimstrLit("len(a) == L string modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
return result_57015;
}
function suiteStarted_57067(formatter_57069, suiteName_57070) {

var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 238;
writeLine_48835(formatter_57069.stream, [nsuFormatSingleElem(makeNimstrLit("\x09<testsuite name=\"$1\">"), xmlEscape_57012(suiteName_57070))]);
framePtr = F.prev;
}
function suiteStarted_56401(formatter_56403, suiteName_56404) {

var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 166;
rawEcho(makeNimstrLit("\x0A[Suite] "), suiteName_56404);
F.line = 167;
formatter_56403.isInSuite = true;
framePtr = F.prev;
}
function suiteStarted_55601(formatter_55603, suiteName_55604) {

var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
framePtr = F.prev;
}
function suiteStarted_55606(formatter_55603, suiteName_55604) {

var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = -1;
chckNilDisp(formatter_55603);
if (isObj(formatter_55603.m_type, NTI55430)) {
F.line = 118;
suiteStarted_57067(formatter_55603, suiteName_55604);
}
else {
if (isObj(formatter_55603.m_type, NTI55424)) {
F.line = 118;
suiteStarted_56401(formatter_55603, suiteName_55604);
}
else {
if (isObj(formatter_55603.m_type, NTI55422)) {
F.line = 118;
suiteStarted_55601(formatter_55603, suiteName_55604);
}
}}
framePtr = F.prev;
}
function slash__21007(x_21009, y_21010) {

var result_21011 = 0.0;
var F={procname:"system./",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 3312;
result_21011 = (x_21009 / y_21010);
framePtr = F.prev;
return result_21011;
}
function toSeconds_51664(time_51666) {

var result_53726 = 0.0;
var F={procname:"times.toSeconds",prev:framePtr,filename:"lib/pure/times.nim",line:0};
framePtr = F;
F.line = 1343;
result_53726 = slash__21007(time_51666.getTime(), 1000);
framePtr = F.prev;
return result_53726;
}
function epochTime_53731() {

var result_53733 = 0.0;
var F={procname:"times.epochTime",prev:framePtr,filename:"lib/pure/times.nim",line:0};
framePtr = F;
F.line = 1347;
result_53733 = toSeconds_51664(new Date());
framePtr = F.prev;
return result_53733;
}
function testStarted_57073(formatter_57075, testName_57076) {

var F={procname:"unittest.testStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 241;
formatter_57075.testErrors.length = 0;
F.line = 242;
formatter_57075.testStackTrace.length = 0+1; formatter_57075.testStackTrace[formatter_57075.testStackTrace.length-1] = 0;
F.line = 243;
formatter_57075.testStartTime = epochTime_53731();
framePtr = F.prev;
}
function testStarted_56603(formatter_56605, testName_56606) {

var F={procname:"unittest.testStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 170;
formatter_56605.isInTest = true;
framePtr = F.prev;
}
function testStarted_55608(formatter_55610, testName_55611) {

var F={procname:"unittest.testStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
framePtr = F.prev;
}
function testStarted_55613(formatter_55610, testName_55611) {

var F={procname:"unittest.testStarted",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = -1;
chckNilDisp(formatter_55610);
if (isObj(formatter_55610.m_type, NTI55430)) {
F.line = 120;
testStarted_57073(formatter_55610, testName_55611);
}
else {
if (isObj(formatter_55610.m_type, NTI55424)) {
F.line = 120;
testStarted_56603(formatter_55610, testName_55611);
}
else {
if (isObj(formatter_55610.m_type, NTI55422)) {
F.line = 120;
testStarted_55608(formatter_55610, testName_55611);
}
}}
framePtr = F.prev;
}
function add_57095(x_57101, x_57101_Idx, y_57104) {

var F={procname:"add.add",prev:framePtr,filename:"lib/system.nim",line:0};
framePtr = F;
F.line = 1441;
var xl_57112 = (x_57101[x_57101_Idx] != null ? x_57101[x_57101_Idx].length : 0);
F.line = 1442;
x_57101[x_57101_Idx].length = chckRange(addInt(xl_57112, (y_57104 != null ? y_57104.length : 0)), 0, 2147483647);
L1: do {
F.line = 1443;
var i_57138 = 0;
F.line = 1960;
var colontmp__57140 = 0;
F.line = 1443;
colontmp__57140 = (y_57104 != null ? (y_57104.length-1) : -1);
F.line = 1942;
var res_57143 = 0;
L2: do {
F.line = 1943;
L3: while (true) {
if (!(res_57143 <= colontmp__57140)) break L3;
F.line = 1944;
i_57138 = res_57143;
F.line = 1443;
x_57101[x_57101_Idx][chckIndx(addInt(xl_57112, i_57138), 0, x_57101[x_57101_Idx].length)-0] = nimCopy(null, y_57104[chckIndx(i_57138, 0, y_57104.length)-0], NTI138);
F.line = 1963;
res_57143 = addInt(res_57143, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function failureOccurred_57087(formatter_57089, checkpoints_57091, stackTrace_57092) {

var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 248;
add_57095(formatter_57089, "testErrors", checkpoints_57091);
if (!(eqStrings(stackTrace_57092, null))) {
F.line = 250;
formatter_57089.testStackTrace = nimCopy(null, stackTrace_57092, NTI138);
}

framePtr = F.prev;
}
function failureOccurred_56607(formatter_56609, checkpoints_56611, stackTrace_56612) {

var Tmp1;
var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
if (!(eqStrings(stackTrace_56612, null))) {
F.line = 174;
rawEcho(stackTrace_56612);
}

F.line = 175;
if (formatter_56609.isInSuite) {
Tmp1 = makeNimstrLit("    ");
}
else {
Tmp1 = makeNimstrLit("");
}

var prefix_56615 = nimCopy(null, Tmp1, NTI138);
L2: do {
F.line = 176;
var msg_56802 = null;
F.line = 3567;
var i_56808 = 0;
F.line = 3568;
var L_56810 = (checkpoints_56611 != null ? checkpoints_56611.length : 0);
L3: do {
F.line = 3569;
L4: while (true) {
if (!(i_56808 < L_56810)) break L4;
F.line = 3570;
msg_56802 = checkpoints_56611[chckIndx(i_56808, 0, checkpoints_56611.length)-0];
F.line = 177;
rawEcho(prefix_56615, msg_56802);
F.line = 3571;
i_56808 = addInt(i_56808, 1);
if (!(((checkpoints_56611 != null ? checkpoints_56611.length : 0) == L_56810))) {
F.line = 3572;
failedAssertImpl_21839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
}
function failureOccurred_55615(formatter_55617, checkpoints_55619, stackTrace_55620) {

var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
framePtr = F.prev;
}
function failureOccurred_55622(formatter_55617, checkpoints_55619, stackTrace_55620) {

var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = -1;
chckNilDisp(formatter_55617);
if (isObj(formatter_55617.m_type, NTI55430)) {
F.line = 122;
failureOccurred_57087(formatter_55617, checkpoints_55619, stackTrace_55620);
}
else {
if (isObj(formatter_55617.m_type, NTI55424)) {
F.line = 122;
failureOccurred_56607(formatter_55617, checkpoints_55619, stackTrace_55620);
}
else {
if (isObj(formatter_55617.m_type, NTI55422)) {
F.line = 122;
failureOccurred_55615(formatter_55617, checkpoints_55619, stackTrace_55620);
}
}}
framePtr = F.prev;
}
function nsuformatBiggestFloat(f_45010, format_45011, precision_45013, decimalSep_45014) {

var result_45015 = null;
var res_45201 = null;
switch (format_45011) {
case 0: res_45201 = f_45010.toString();
break;
case 1: res_45201 = f_45010.toFixed(precision_45013);
break;
case 2: res_45201 = f_45010.toExponential(precision_45013);
break;
}
result_45015 = nimCopy(null, cstrToNimstr(res_45201), NTI138);
L1: do {
var i_45211 = 0;
var colontmp__45224 = 0;
colontmp__45224 = (result_45015 != null ? result_45015.length-1 : 0);
var i_45227 = 0;
L2: do {
L3: while (true) {
if (!(i_45227 < colontmp__45224)) break L3;
i_45211 = i_45227;
if ((ConstSet6[result_45015[i_45211]] != undefined)) {
result_45015[i_45211] = decimalSep_45014;
}

i_45227 += 1;
}
} while(false);
} while(false);
return result_45015;
}
function nsuformatFloat(f_45231, format_45232, precision_45234, decimalSep_45235) {

var result_45236 = null;
result_45236 = nimCopy(null, nsuformatBiggestFloat(f_45231, format_45232, precision_45234, decimalSep_45235), NTI138);
return result_45236;
}
function nsuFormatOpenArray(formatstr_45725, a_45727) {

var result_45728 = [null];
result_45728[0] = nimCopy(null, mnewString(0), NTI138);
nsuAddf(result_45728, 0, formatstr_45725, a_45727);
return result_45728[0];
}
function testEnded_57148(formatter_57150, testResult_57151) {

var Tmp1;
var Tmp2;
var Tmp3;
var Tmp4;
var F={procname:"unittest.testEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 253;
var time_57152 = (epochTime_53731() - formatter_57150.testStartTime);
F.line = 254;
var timeStr_57153 = nsuformatFloat(time_57152, 1, 8, 46);
F.line = 255;
writeLine_48835(formatter_57150.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09<testcase name=\"$#\" time=\"$#\">"), [xmlEscape_57012(testResult_57151.testName), timeStr_57153])]);
F.line = 256;
switch (testResult_57151.status) {
case 0: 
break;
case 2: F.line = 260;
writeLine_48835(formatter_57150.stream, [makeNimstrLit("<skipped />")]);

break;
case 1: F.line = 262;
if (!(0 < (formatter_57150.testStackTrace != null ? formatter_57150.testStackTrace.length-1 : 0))) Tmp2 = false; else {Tmp2 = (0 < (formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0)); }if (Tmp2) {
Tmp1 = xmlEscape_57012(formatter_57150.testErrors[chckIndx(subInt((formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0), 1), 0, formatter_57150.testErrors.length)-0]);
}
else {
if ((0 < (formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0))) {
Tmp1 = xmlEscape_57012(formatter_57150.testErrors[0]);
}
else {
Tmp1 = makeNimstrLit("The test failed without outputting an error");
}
}
var failureMsg_57181 = nimCopy(null, Tmp1, NTI138);
F.line = 269;
var errs_57182 = makeNimstrLit("");
if ((1 < (formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0))) {
F.line = 271;
if ((0 < (formatter_57150.testStackTrace != null ? formatter_57150.testStackTrace.length-1 : 0))) {
Tmp3 = 0;
}
else {
Tmp3 = 1;
}

var startIdx_57190 = Tmp3;
F.line = 272;
if ((0 < (formatter_57150.testStackTrace != null ? formatter_57150.testStackTrace.length-1 : 0))) {
Tmp4 = subInt((formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0), 2);
}
else {
Tmp4 = subInt((formatter_57150.testErrors != null ? formatter_57150.testErrors.length : 0), 1);
}

var endIdx_57205 = Tmp4;
L5: do {
F.line = 275;
var errIdx_57215 = 0;
F.line = 1942;
var res_57231 = startIdx_57190;
L6: do {
F.line = 1943;
L7: while (true) {
if (!(res_57231 <= endIdx_57205)) break L7;
F.line = 1944;
errIdx_57215 = res_57231;
if ((0 < (errs_57182 != null ? errs_57182.length-1 : 0))) {
F.line = 277;
if (errs_57182 != null) { errs_57182 = (errs_57182.slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { errs_57182 = makeNimstrLit("\x0A");};
}

F.line = 278;
if (errs_57182 != null) { errs_57182 = (errs_57182.slice(0, -1)).concat(xmlEscape_57012(formatter_57150.testErrors[chckIndx(errIdx_57215, 0, formatter_57150.testErrors.length)-0])); } else { errs_57182 = xmlEscape_57012(formatter_57150.testErrors[chckIndx(errIdx_57215, 0, formatter_57150.testErrors.length)-0]);};
F.line = 1963;
res_57231 = addInt(res_57231, 1);
}
} while(false);
} while(false);
}

if ((0 < (formatter_57150.testStackTrace != null ? formatter_57150.testStackTrace.length-1 : 0))) {
F.line = 281;
writeLine_48835(formatter_57150.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09\x09<error message=\"$#\">$#</error>"), [failureMsg_57181, xmlEscape_57012(formatter_57150.testStackTrace)])]);
if ((0 < (errs_57182 != null ? errs_57182.length-1 : 0))) {
F.line = 283;
writeLine_48835(formatter_57150.stream, [nsuFormatSingleElem(makeNimstrLit("\x09\x09\x09<system-err>$#</system-err>"), errs_57182)]);
}

}
else {
F.line = 285;
writeLine_48835(formatter_57150.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09\x09<failure message=\"$#\">$#</failure>"), [failureMsg_57181, errs_57182])]);
}


break;
}
F.line = 287;
writeLine_48835(formatter_57150.stream, [makeNimstrLit("\x09\x09</testcase>")]);
framePtr = F.prev;
}
function isUndefined_20232(x_20236) {

var result_20237 = false;
var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
framePtr = F;
F.line = 34;
result_20237 = x_20236 === undefined;framePtr = F.prev;
return result_20237;
}
function testEnded_56811(formatter_56813, testResult_56814) {

var Tmp1;
var Tmp2;
var Tmp3;
var F={procname:"unittest.testEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 180;
formatter_56813.isInTest = false;
if (!!((formatter_56813.outputLevel == 2))) Tmp1 = false; else {if ((formatter_56813.outputLevel == 0)) Tmp2 = true; else {Tmp2 = (testResult_56814.status == 1); }Tmp1 = Tmp2; }if (Tmp1) {
F.line = 184;
if (!(eqStrings(testResult_56814.suiteName, null))) {
Tmp3 = makeNimstrLit("  ");
}
else {
Tmp3 = makeNimstrLit("");
}

var prefix_56839 = nimCopy(null, Tmp3, NTI138);
F.line = 197;
rawEcho(prefix_56839, makeNimstrLit("["), reprEnum(testResult_56814.status, NTI55402), makeNimstrLit("] "), testResult_56814.testName);
}

framePtr = F.prev;
}
function testEnded_55624(formatter_55626, testResult_55627) {

var F={procname:"unittest.testEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
framePtr = F.prev;
}
function testEnded_55629(formatter_55626, testResult_55627) {

var F={procname:"unittest.testEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = -1;
chckNilDisp(formatter_55626);
if (isObj(formatter_55626.m_type, NTI55430)) {
F.line = 126;
testEnded_57148(formatter_55626, testResult_55627);
}
else {
if (isObj(formatter_55626.m_type, NTI55424)) {
F.line = 126;
testEnded_56811(formatter_55626, testResult_55627);
}
else {
if (isObj(formatter_55626.m_type, NTI55422)) {
F.line = 126;
testEnded_55624(formatter_55626, testResult_55627);
}
}}
framePtr = F.prev;
}
function suiteEnded_57235(formatter_57237) {

var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 290;
writeLine_48835(formatter_57237.stream, [makeNimstrLit("\x09</testsuite>")]);
framePtr = F.prev;
}
function suiteEnded_57009(formatter_57011) {

var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = 200;
formatter_57011.isInSuite = false;
framePtr = F.prev;
}
function suiteEnded_55631(formatter_55633) {

var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
framePtr = F.prev;
}
function suiteEnded_55635(formatter_55633) {

var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"lib/pure/unittest.nim",line:0};
framePtr = F;
F.line = -1;
chckNilDisp(formatter_55633);
if (isObj(formatter_55633.m_type, NTI55430)) {
F.line = 128;
suiteEnded_57235(formatter_55633);
}
else {
if (isObj(formatter_55633.m_type, NTI55424)) {
F.line = 128;
suiteEnded_57009(formatter_55633);
}
else {
if (isObj(formatter_55633.m_type, NTI55422)) {
F.line = 128;
suiteEnded_55631(formatter_55633);
}
}}
framePtr = F.prev;
}
